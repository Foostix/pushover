{"name":"Pushover","tagline":"A gem to interface with pushover.net","body":"# Pushover\r\n**Master** [![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/erniebrodeur/pushover) [![Build Status](https://travis-ci.org/erniebrodeur/pushover.png?branch=master)](https://travis-ci.org/erniebrodeur/pushover) [![Dependency Status](https://gemnasium.com/erniebrodeur/pushover.png)](https://gemnasium.com/erniebrodeur/pushover)\r\n\r\n**Development** [![Build Status](https://travis-ci.org/erniebrodeur/pushover.png?branch=development)](https://travis-ci.org/erniebrodeur/pushover)\r\n\r\nThis gem provides a CLI and an API interface to http://pushover.net.\r\n\r\n## Installation\r\n\r\nTo install:\r\n\r\n\t\t% gem install pushover\r\n\r\nTo use inside of an application, add this to the your gemfile:\r\n\r\n\t\t% gem 'pushover'\r\n\r\nand run bundle to make it available:\r\n\r\n\t\t% bundle\r\n\r\n## Usage\r\n\r\n### API:\r\n```ruby\r\nrequire 'pushover'\r\n```\r\n\r\nTo send with the very minimum amount of information.\r\n\r\n```ruby\r\nPushover.notification(message: 'message', title: 'title', user: 'USER_TOKEN', token: 'APP_TOKEN')\r\n```\r\n\r\nOptional #configuration method:\r\n```ruby\r\nPushover.configure do |config|\r\n  config.user='USER_TOKEN'\r\n  config.token='APP_TOKEN'\r\nend\r\n\r\nPushover.notification(message: 'message', title: 'title')\r\n```\r\n\r\n### CLI:\r\n\r\nTo get help do, try ```--(h)elp```\r\n\r\n\t\t% pushover -h\r\n\r\nTo send a message.\r\n\r\n\t\t% pushover -u user_token -a app_key message is the rest of the cli.\r\n\r\n#### Optional parameters\r\n\r\nMost optional parameters have a shorter form you can use.  If that's the case, they will be displayed like ```--(h)elp```.\r\n\r\n#### Config_file\r\n\r\nThe file to use for stored settings (including credentials).\r\n\r\n\t\t% pushover --(c)onfig_file /tmp/config_file\r\n\r\n\r\n#### Title\r\n\r\nThe title of the message, if not supplied it will end up being the app name.\r\n\r\n\t\t% pushover --(t)itle \"A title\"\r\n\r\n\t\t% pushover --(t)itle \"A title\"\r\n\r\n#### Priority\r\n\r\nPriority of the message, either (low,normal,high) or (-1,0,1).  For the string you only need the first letter.\r\n\r\n\t\t% pushover --(p)riority high\r\n\r\n\t\t% pushover --(p)riority h\r\n\r\n\t\t% pushover --(p)riority -1\r\n\r\n#### Emergency Notifications\r\n\r\nCurrently retry/expire is supported, currently these are in seconds.  Callback url's are not.\r\n\r\n\t\t% pushover --emergency_retry 60\r\n\r\n\t\t% pushover --emergency_expire 3600\r\n\r\nIt won't pre-check values sent to the api, so you will need to tune for the current min/max values or check api documentation.\r\n\r\n#### Device\r\n\r\nSpecific device to send the message too, must be registered at pushover.net\r\n\r\n\t\t% pushover --(d)evice \"Device name\"\r\n\r\n#### URL\r\n\r\nSupplementary URL that can be passed with the message.\r\n\r\n\t\t% pushover --url \"http://www.github.com/erniebrodeur/pushover\"\r\n\r\n##### URL Title\r\n\r\nThe display string of the supplementary URL.\r\n\r\n\t\t% pushover --url \"http://www.git.com/erniebrodeur/pushover\" --url_title \"This repo.\"\r\n\r\n#### Time\r\n\r\nTime is tricky, I just pass the string off to the stdlib ```Time.parse```.  Therefore, if it fails I can't do much about it.  Though, it shouldn't fail, it seems to take just a ton of stuff.  You can always handle this yourself and just pass in an epoch (string or fixnum).\r\n\r\n\t\t% pushover --time 1331249662\r\n\r\n\t\t% pushover --time \"6:30\"\r\n\r\n##### String examples\r\n\r\nAs far as I can tell, you can toss a ton of different things and get an output.\r\n\r\n* rfc822: Tue, 14 Nov 2000 14:55:07 -0500\r\n* xml: 1979-08-13T06:30:00.313UTC\r\n* Aug 13, 1979 6:30\r\n* 1979/08/13, 6:30:50 UTC\r\n* 6:30\r\n* 14:30\r\n* Aug 21\r\n\r\n##### Sounds\r\n\r\nGet the available list of sounds:\r\n\r\n\t\t% pushover --sound_list\r\n\r\nPlay a specific sound with a message:\r\n\r\n\t\t% pushover --sound Magic\r\n\t\t% pushover --sound per\r\n\r\n* You only need to supply an unambiguous partial string.\r\n* It is not case sensitive.\r\n\r\n#### Saving\r\n\r\nYou can also save and use stored information.  The username/application are titles.  They can be anything you want to reference them.\r\n\r\n##### User\r\n\r\n\t\t% pushover -u user_token --save-user email@somewhere.net\r\n\r\n##### Application\r\n\r\n\t\t% pushover -a app_key --save-app myApp\r\n\r\nDelete done in the api, not lifted to the cli.\r\n\r\nNow, you can use these to send messages instead of having to remember the key:\r\n\r\n\t\t% pushover -a myApp -u email@somewhere.net Hello from somewhere!\r\n\r\nIf you don't supply the application or user name, it will use the first one in the save file.\r\n\r\n\t\t% pushover so now I can just send an app.\r\n\r\nAnytime you supply tokens directly to the cli, it will ignore any saved information and try them.  This allows you to use it as a once-off tool while keeping credentials stored.\r\n\r\n## TODO\r\n\r\n### 1.0 tree\r\n\r\n* Callback urls.\r\n* Receipt testing.\r\n\r\n### 2.0 tree\r\n\r\n* Rebuild the CLI so it works more like a git/bundle command.\r\n* More argument/string magic.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}